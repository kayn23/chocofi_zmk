/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define DVORAK 1
#define SYM 3
#define NAV 4
#define SYSTEM 2

&mt {
    tapping-term-ms = <300>;
    require-prior-idle-ms = <125>;
    quick-tap-ms = <200>;
};

&lt { tapping-term-ms = <125>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        l_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <130>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 34 35 36 37>;
        };

        r_pht: right_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <130>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        bkt: bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "BKT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <180>;
        };

        bSlh: bSlh {
            compatible = "zmk,behavior-tap-dance";
            label = "BSLH";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BACKSLASH>;
        };
    };

    combos {
        compatible = "zmk,combos";

        off {
            bindings = <&soft_off>;
            key-positions = <25 34>;
        };

        ClearAllBtProfile {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <1 10>;
        };
    };

    macros {
        toggle_dvo: toggle_dvo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LC(SPACE) &tog 1>;

            label = "TOGGLE_DVO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  xxx |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | xxx |
            // |  xxx |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | xxx |
            // |  xxx |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | xxx |
            //                    | esc | nav | ent |   | spc | sym  | bspc |

            bindings = <
&none  &kp Q        &kp W           &kp E         &kp R       &kp T        &kp Y      &kp U       &kp I          &kp O           &kp P           &none
&none  &hm LCTRL A  &hm LEFT_ALT S  &hm LSHIFT D  &hm LGUI F  &kp G        &kp H      &hm LGUI J  &hm RSHIFT K   &hm LEFT_ALT L  &hm LCTRL SEMI  &none
&none  &kp Z        &kp X           &kp C         &kp V       &kp B        &kp N      &kp M       &kp COMMA      &kp DOT         &kp FSLH        &none
                                    &kp ESC       &mo 3       &kp ENTER    &kp SPACE  &mo 2       &kp BACKSPACE
            >;
        };

        DVORAK {
            bindings = <
&none  &kp SQT      &kp COMMA       &kp DOT       &kp P       &kp Y        &kp F      &kp G       &kp C          &kp R           &kp L        &none
&none  &hm LCTRL A  &hm LEFT_ALT O  &hm LSHIFT E  &hm LGUI U  &kp I        &kp D      &hm LGUI H  &hm RSHIFT T   &hm LEFT_ALT N  &hm LCTRL S  &none
&none  &kp SEMI     &kp Q           &kp J         &kp K       &kp X        &kp B      &kp M       &kp W          &kp V           &kp Z        &none
                                    &kp ESC       &mo 3       &kp ENTER    &kp SPACE  &mo 2       &kp BACKSPACE
            >;
        };

        SYM {
            bindings = <
&none  &kp EXCL   &kp AT     &kp POUND         &kp DLLR        &kp PRCNT    &kp CARET  &kp AMPS        &kp STAR          &kp LPAR   &kp RPAR   &none
&none  &kp KP_N1  &kp KP_N2  &mt LSHIFT KP_N3  &mt LGUI KP_N4  &kp KP_N5    &kp KP_N6  &mt LGUI KP_N7  &mt LSHIFT KP_N8  &kp KP_N9  &kp KP_N0  &none
&none  &kp LBRC   &kp RBRC   &kp MINUS         &kp EQUAL       &kp GRAVE    &kp SLASH  &kp QUESTION    &bkt              &kp SQT    &bSlh      &none
                             &kp ESC           &none           &kp ENTER    &kp SPACE  &none           &kp BACKSPACE
            >;
        };

        NAV {
            bindings = <
&none  &kp LG(LBKT)          &kp LG(RBKT)   &kp LC(LS(TAB))  &kp LC(TAB)    &trans           &kp TAB        &kp C_PP      &kp K_MUTE     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &none
&none  &kp LCTRL             &kp LALT       &kp LSHIFT       &kp LGUI       &trans           &kp LG(LEFT)   &kp LEFT      &kp DOWN       &kp UP             &kp RIGHT          &none
&none  &kp LG(LS(NUMBER_6))  &kp LG(RS(Q))  &kp LC(LEFT)     &kp LC(RIGHT)  &kp LA(LG(I))    &kp LG(RIGHT)  &kp LA(LEFT)  &kp LA(RIGHT)  &kp LA(LS(LEFT))   &kp LA(LS(RIGHT))  &none
                                            &kp ESC          &none          &kp ENTER        &kp SPACE      &toggle_dvo   &kp BACKSPACE
            >;
        };
    };
};
